%% New beginnings

%clear
clc

options.correct_artifact = 0;
options.dt = [-5 15];
%% Load Fluoresence data and determine **exact** framerate;
% Get the necessary files and folders
[fileL_flo, dirL_flo] = uigetfile('*.csv', ...
        'Select fluorescence file, laser'); %laser files

cd(dirL_flo);
[fileC_flo, dirC_flo] = uigetfile('*.csv', ...
    'Select fluorescence file, control'); % control files

% .xml files
[fileL_xml, dirL_xml] = uigetfile('*.xml', ...
    'Select xml file, laser'); % control files
[fileC_xml, dirC_xml] = uigetfile('*.xml', ...
    'Select xml file, control'); % control files

% Stim files .mat
[fileL_mat, dirL_mat] = uigetfile('*.mat', ...
    'Select mat file, laser'); % control files
[fileC_mat, dirC_mat] = uigetfile('*.mat', ...
    'Select mat  file, control'); % control files


%%
rawF_C = importdata(fileC_flo);
rawF_C = rawF_C.data(2:end,:)';

rawF_L = importdata(fileL_flo);
rawF_L = rawF_L.data(2:end,:)';

dffC = get_dff_from_raw(rawF_C);
dffL = get_dff_from_raw(rawF_L);

%%
raw_xmlC = fileread(fileC_xml);
raw_xmlL = fileread(fileL_xml);

[avgFRC, frametimeC] = process_xml(raw_xmlC);
[avgFRL, frametimeL] = process_xml(raw_xmlL);

    
%% Load file with opto stim info
load(fileC_mat);
dataC = data;
load(fileL_mat);
dataL = data;

%% Split into trials

[trialsC, trials_zscoreC] = find_trialzscore(dataC, dffC, frametimeC, avgFRC, options);
[trialsL, trials_zscoreL] = find_trialzscore(dataL, dffL, frametimeL, avgFRL, options);
%%

% 
% trialDur_frame = fix([diff(ts) mean(diff(ts))]*avgFR); %duration for last trial unknown -- use average duration
% numcells = size(dff,1);
% 
% for i = 1:numcells;
%     for ii = 1:numel(ts_frame);
%         pad = [];
%         curr_idx = ts_frame(ii):(ts_frame(ii)-10)+trialDur_frame(ii)-10;
%         if curr_idx(end) > frameNum
%             framesOver = curr_idx(end) - frameNum;
%             pad = nan(1,framesOver);
%             curr_idx = curr_idx(1:end-framesOver);
%         end
%         trials{i}(ii,:) = [dff(i,curr_idx) pad];
%     end
% end 
% 
stimOrderC = dataC.stimOrder;
stimOrderL = dataL.stimOrder;
num_stims = unique(stimOrderC);
nCells = size(dffC,1);

for i = 1:nCells
    curr = trials_zscoreC{i};
    for ii = 1:numel(num_stims);
        curr_idx = stimOrderC == ii;
        trial_typesC{i}{ii} = curr(curr_idx,:);
    end
    
    curr = trials_zscoreL{i};
    for ii = 1:numel(num_stims);
        curr_idx = stimOrderL == ii;
        trial_typesL{i}{ii} = curr(curr_idx,:);
    end
end

%% Plot
[preC, postC, inh_sigC, exc_sigC] = analyze_trialtypes(trial_typesC, num_stims);
[preL, postL, inh_sigL, exc_sigL] = analyze_trialtypes(trial_typesL, num_stims);


%% Plot
for neuron = 1:nCells
for i = 1:10
    plot([0.9 1.1], [preC{1}(1,i), postC{1}(1,i)],  'b');
    plot([1.9 2.1], [preL{1}(1,i), postL{1}(1,i)],  'b');
    hold on;
    
end
%%

%         ylim([min(toPlot)-0.1 max(max(toPlot))]);
%        hold on;
%         if inh_sig(i,ii) == 1
%             figure(i);
%             plot_shadedaverage(curr{ii},-4.8:0.2:15,[0 0 0],'-');
%             xlim([-2 5]);
%             ylim([-0.2 2]); shg
%         end

% inhibited = find(inh_sig)';
% % inhibited = 1:nCells;
% excited = find(exc_sig)';
% 
% for i = 1:numel(inhibited)
%     inhibited_z(i,:) = nanmean(trial_types{inhibited(i)}{1},1);
% end
% 
% for i = 1:numel(excited)
%     excited_z(i,:) = nanmean(trial_types{excited(i)}{1},1);
% end
% 
% plot_shadedaverage(inhibited_z,-4.8:0.2:15,[0 0 0],'-');
% xlim([-1 5])
% ylim([-1 0.5]);
% 
% figure;
% plot_shadedaverage(excited_z,-4.8:0.2:15,[0 0 0],'-');
% xlim([-1 5])
% ylim([-0.5 1]);
%% Look at changes in correlation structure


